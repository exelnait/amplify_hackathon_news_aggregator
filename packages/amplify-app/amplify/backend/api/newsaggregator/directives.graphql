# https://docs.amplify.aws/cli-legacy/graphql-transformer/model/
directive @model(
    queries: ModelQueryMap
    mutations: ModelMutationMap
    subscriptions: ModelSubscriptionMap
    timestamps: TimestampConfiguration
) repeatable on OBJECT
input ModelMutationMap {
    create: String
    update: String
    delete: String
}
input ModelQueryMap {
    get: String
    list: String
}
input ModelSubscriptionMap {
    onCreate: [String]
    onUpdate: [String]
    onDelete: [String]
    level: ModelSubscriptionLevel
}
enum ModelSubscriptionLevel {
    off
    public
    on
}
input TimestampConfiguration {
    createdAt: String
    updatedAt: String
}

# https://docs.amplify.aws/cli-legacy/graphql-transformer/key/
directive @key(fields: [String!]!, name: String, queryField: String) repeatable on OBJECT

# https://docs.amplify.aws/cli-legacy/graphql-transformer/auth/
# When applied to a type, augments the application with
# owner and group-based authorization rules.
directive @auth(rules: [AuthRule!]!) repeatable on OBJECT | FIELD_DEFINITION
input AuthRule {
    allow: AuthStrategy!
    provider: AuthProvider
    ownerField: String # defaults to "owner" when using owner auth
    identityClaim: String # defaults to "username" when using owner auth
    groupClaim: String # defaults to "cognito:groups" when using Group auth
    groups: [String]  # Required when using Static Group auth
    groupsField: String # defaults to "groups" when using Dynamic Group auth
    operations: [ModelOperation] # Required for finer control

    # The following arguments are deprecated. It is encouraged to use the 'operations' argument.
    queries: [ModelQuery]
    mutations: [ModelMutation]
}
enum AuthStrategy { owner groups private public }
enum AuthProvider { apiKey iam oidc userPools }
enum ModelOperation { create update delete read }

# The following objects are deprecated. It is encouraged to use ModelOperations.
enum ModelQuery { get list }
enum ModelMutation { create update delete }

# https://docs.amplify.aws/cli-legacy/graphql-transformer/connection/
directive @connection(keyName: String, fields: [String!]) repeatable on FIELD_DEFINITION

# https://docs.amplify.aws/cli-legacy/graphql-transformer/function/
directive @function(name: String!, region: String) repeatable on FIELD_DEFINITION

# https://docs.amplify.aws/cli-legacy/graphql-transformer/http/
directive @http(method: HttpMethod, url: String!, headers: [HttpHeader]) repeatable on FIELD_DEFINITION
enum HttpMethod { PUT POST GET DELETE PATCH }
input HttpHeader {
    key: String
    value: String
}

# https://docs.amplify.aws/cli-legacy/graphql-transformer/predictions/
directive @predictions(actions: [PredictionsActions!]!) repeatable on FIELD_DEFINITION
enum PredictionsActions {
    identifyText # uses Amazon Rekognition to detect text
    identifyLabels # uses Amazon Rekognition to detect labels
    convertTextToSpeech # uses Amazon Polly in a lambda to output a presigned url to synthesized speech
    translateText # uses Amazon Translate to translate text from source to target language
}

# https://docs.amplify.aws/cli-legacy/graphql-transformer/searchable/
# Streams data from DynamoDB to OpenSearch and exposes search capabilities.
directive @searchable(queries: SearchableQueryMap) repeatable on OBJECT
input SearchableQueryMap { search: String }

# https://docs.amplify.aws/cli-legacy/graphql-transformer/versioned/
directive @versioned(versionField: String = "version", versionInput: String = "expectedVersion") repeatable on OBJECT

# https://npm.io/package/@aws-amplify/graphql-relational-transformer
directive @hasOne(fields: [String!]) repeatable on FIELD_DEFINITION
directive @hasMany(indexName: String, fields: [String!], limit: Int = 100) repeatable on FIELD_DEFINITION
directive @belongsTo(fields: [String!]) repeatable on FIELD_DEFINITION
directive @manyToMany(relationName: String!, limit: Int = 100) repeatable on FIELD_DEFINITION

# https://docs.amplify.aws/cli/graphql/data-modeling/#configure-a-primary-key
directive @index(name: String, queryField: String, sortKeyFields: [String!]) repeatable on FIELD_DEFINITION